/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { LibraryFrameworkService } from "../libraryFramework.service";
import { LibraryFrameworkCreateInput } from "./LibraryFrameworkCreateInput";
import { LibraryFramework } from "./LibraryFramework";
import { LibraryFrameworkFindManyArgs } from "./LibraryFrameworkFindManyArgs";
import { LibraryFrameworkWhereUniqueInput } from "./LibraryFrameworkWhereUniqueInput";
import { LibraryFrameworkUpdateInput } from "./LibraryFrameworkUpdateInput";

export class LibraryFrameworkControllerBase {
  constructor(protected readonly service: LibraryFrameworkService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: LibraryFramework })
  async createLibraryFramework(
    @common.Body() data: LibraryFrameworkCreateInput
  ): Promise<LibraryFramework> {
    return await this.service.createLibraryFramework({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        id: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [LibraryFramework] })
  @ApiNestedQuery(LibraryFrameworkFindManyArgs)
  async libraryFrameworks(
    @common.Req() request: Request
  ): Promise<LibraryFramework[]> {
    const args = plainToClass(LibraryFrameworkFindManyArgs, request.query);
    return this.service.libraryFrameworks({
      ...args,
      select: {
        createdAt: true,
        id: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: LibraryFramework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async libraryFramework(
    @common.Param() params: LibraryFrameworkWhereUniqueInput
  ): Promise<LibraryFramework | null> {
    const result = await this.service.libraryFramework({
      where: params,
      select: {
        createdAt: true,
        id: true,
        name: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: LibraryFramework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateLibraryFramework(
    @common.Param() params: LibraryFrameworkWhereUniqueInput,
    @common.Body() data: LibraryFrameworkUpdateInput
  ): Promise<LibraryFramework | null> {
    try {
      return await this.service.updateLibraryFramework({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          id: true,
          name: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: LibraryFramework })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteLibraryFramework(
    @common.Param() params: LibraryFrameworkWhereUniqueInput
  ): Promise<LibraryFramework | null> {
    try {
      return await this.service.deleteLibraryFramework({
        where: params,
        select: {
          createdAt: true,
          id: true,
          name: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
