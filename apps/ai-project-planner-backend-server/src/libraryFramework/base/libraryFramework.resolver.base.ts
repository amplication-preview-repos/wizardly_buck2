/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { LibraryFramework } from "./LibraryFramework";
import { LibraryFrameworkCountArgs } from "./LibraryFrameworkCountArgs";
import { LibraryFrameworkFindManyArgs } from "./LibraryFrameworkFindManyArgs";
import { LibraryFrameworkFindUniqueArgs } from "./LibraryFrameworkFindUniqueArgs";
import { CreateLibraryFrameworkArgs } from "./CreateLibraryFrameworkArgs";
import { UpdateLibraryFrameworkArgs } from "./UpdateLibraryFrameworkArgs";
import { DeleteLibraryFrameworkArgs } from "./DeleteLibraryFrameworkArgs";
import { Project } from "../../project/base/Project";
import { LibraryFrameworkService } from "../libraryFramework.service";
@graphql.Resolver(() => LibraryFramework)
export class LibraryFrameworkResolverBase {
  constructor(protected readonly service: LibraryFrameworkService) {}

  async _libraryFrameworksMeta(
    @graphql.Args() args: LibraryFrameworkCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [LibraryFramework])
  async libraryFrameworks(
    @graphql.Args() args: LibraryFrameworkFindManyArgs
  ): Promise<LibraryFramework[]> {
    return this.service.libraryFrameworks(args);
  }

  @graphql.Query(() => LibraryFramework, { nullable: true })
  async libraryFramework(
    @graphql.Args() args: LibraryFrameworkFindUniqueArgs
  ): Promise<LibraryFramework | null> {
    const result = await this.service.libraryFramework(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => LibraryFramework)
  async createLibraryFramework(
    @graphql.Args() args: CreateLibraryFrameworkArgs
  ): Promise<LibraryFramework> {
    return await this.service.createLibraryFramework({
      ...args,
      data: {
        ...args.data,

        project: args.data.project
          ? {
              connect: args.data.project,
            }
          : undefined,
      },
    });
  }

  @graphql.Mutation(() => LibraryFramework)
  async updateLibraryFramework(
    @graphql.Args() args: UpdateLibraryFrameworkArgs
  ): Promise<LibraryFramework | null> {
    try {
      return await this.service.updateLibraryFramework({
        ...args,
        data: {
          ...args.data,

          project: args.data.project
            ? {
                connect: args.data.project,
              }
            : undefined,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => LibraryFramework)
  async deleteLibraryFramework(
    @graphql.Args() args: DeleteLibraryFrameworkArgs
  ): Promise<LibraryFramework | null> {
    try {
      return await this.service.deleteLibraryFramework(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => Project, {
    nullable: true,
    name: "project",
  })
  async getProject(
    @graphql.Parent() parent: LibraryFramework
  ): Promise<Project | null> {
    const result = await this.service.getProject(parent.id);

    if (!result) {
      return null;
    }
    return result;
  }
}
