/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  LibraryFramework as PrismaLibraryFramework,
  Project as PrismaProject,
} from "@prisma/client";

export class LibraryFrameworkServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.LibraryFrameworkCountArgs, "select">
  ): Promise<number> {
    return this.prisma.libraryFramework.count(args);
  }

  async libraryFrameworks<T extends Prisma.LibraryFrameworkFindManyArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFrameworkFindManyArgs>
  ): Promise<PrismaLibraryFramework[]> {
    return this.prisma.libraryFramework.findMany<Prisma.LibraryFrameworkFindManyArgs>(
      args
    );
  }
  async libraryFramework<T extends Prisma.LibraryFrameworkFindUniqueArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFrameworkFindUniqueArgs>
  ): Promise<PrismaLibraryFramework | null> {
    return this.prisma.libraryFramework.findUnique(args);
  }
  async createLibraryFramework<T extends Prisma.LibraryFrameworkCreateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFrameworkCreateArgs>
  ): Promise<PrismaLibraryFramework> {
    return this.prisma.libraryFramework.create<T>(args);
  }
  async updateLibraryFramework<T extends Prisma.LibraryFrameworkUpdateArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFrameworkUpdateArgs>
  ): Promise<PrismaLibraryFramework> {
    return this.prisma.libraryFramework.update<T>(args);
  }
  async deleteLibraryFramework<T extends Prisma.LibraryFrameworkDeleteArgs>(
    args: Prisma.SelectSubset<T, Prisma.LibraryFrameworkDeleteArgs>
  ): Promise<PrismaLibraryFramework> {
    return this.prisma.libraryFramework.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.libraryFramework
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
