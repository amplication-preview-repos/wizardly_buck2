/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";

import {
  Prisma,
  FunctionalRequirement as PrismaFunctionalRequirement,
  Project as PrismaProject,
} from "@prisma/client";

export class FunctionalRequirementServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(
    args: Omit<Prisma.FunctionalRequirementCountArgs, "select">
  ): Promise<number> {
    return this.prisma.functionalRequirement.count(args);
  }

  async functionalRequirements<
    T extends Prisma.FunctionalRequirementFindManyArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FunctionalRequirementFindManyArgs>
  ): Promise<PrismaFunctionalRequirement[]> {
    return this.prisma.functionalRequirement.findMany<Prisma.FunctionalRequirementFindManyArgs>(
      args
    );
  }
  async functionalRequirement<
    T extends Prisma.FunctionalRequirementFindUniqueArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FunctionalRequirementFindUniqueArgs>
  ): Promise<PrismaFunctionalRequirement | null> {
    return this.prisma.functionalRequirement.findUnique(args);
  }
  async createFunctionalRequirement<
    T extends Prisma.FunctionalRequirementCreateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FunctionalRequirementCreateArgs>
  ): Promise<PrismaFunctionalRequirement> {
    return this.prisma.functionalRequirement.create<T>(args);
  }
  async updateFunctionalRequirement<
    T extends Prisma.FunctionalRequirementUpdateArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FunctionalRequirementUpdateArgs>
  ): Promise<PrismaFunctionalRequirement> {
    return this.prisma.functionalRequirement.update<T>(args);
  }
  async deleteFunctionalRequirement<
    T extends Prisma.FunctionalRequirementDeleteArgs
  >(
    args: Prisma.SelectSubset<T, Prisma.FunctionalRequirementDeleteArgs>
  ): Promise<PrismaFunctionalRequirement> {
    return this.prisma.functionalRequirement.delete(args);
  }

  async getProject(parentId: string): Promise<PrismaProject | null> {
    return this.prisma.functionalRequirement
      .findUnique({
        where: { id: parentId },
      })
      .project();
  }
}
