/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { FunctionalRequirementService } from "../functionalRequirement.service";
import { FunctionalRequirementCreateInput } from "./FunctionalRequirementCreateInput";
import { FunctionalRequirement } from "./FunctionalRequirement";
import { FunctionalRequirementFindManyArgs } from "./FunctionalRequirementFindManyArgs";
import { FunctionalRequirementWhereUniqueInput } from "./FunctionalRequirementWhereUniqueInput";
import { FunctionalRequirementUpdateInput } from "./FunctionalRequirementUpdateInput";

export class FunctionalRequirementControllerBase {
  constructor(protected readonly service: FunctionalRequirementService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: FunctionalRequirement })
  async createFunctionalRequirement(
    @common.Body() data: FunctionalRequirementCreateInput
  ): Promise<FunctionalRequirement> {
    return await this.service.createFunctionalRequirement({
      data: {
        ...data,

        project: data.project
          ? {
              connect: data.project,
            }
          : undefined,
      },
      select: {
        createdAt: true,
        description: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [FunctionalRequirement] })
  @ApiNestedQuery(FunctionalRequirementFindManyArgs)
  async functionalRequirements(
    @common.Req() request: Request
  ): Promise<FunctionalRequirement[]> {
    const args = plainToClass(FunctionalRequirementFindManyArgs, request.query);
    return this.service.functionalRequirements({
      ...args,
      select: {
        createdAt: true,
        description: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: FunctionalRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async functionalRequirement(
    @common.Param() params: FunctionalRequirementWhereUniqueInput
  ): Promise<FunctionalRequirement | null> {
    const result = await this.service.functionalRequirement({
      where: params,
      select: {
        createdAt: true,
        description: true,
        id: true,

        project: {
          select: {
            id: true,
          },
        },

        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: FunctionalRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateFunctionalRequirement(
    @common.Param() params: FunctionalRequirementWhereUniqueInput,
    @common.Body() data: FunctionalRequirementUpdateInput
  ): Promise<FunctionalRequirement | null> {
    try {
      return await this.service.updateFunctionalRequirement({
        where: params,
        data: {
          ...data,

          project: data.project
            ? {
                connect: data.project,
              }
            : undefined,
        },
        select: {
          createdAt: true,
          description: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: FunctionalRequirement })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteFunctionalRequirement(
    @common.Param() params: FunctionalRequirementWhereUniqueInput
  ): Promise<FunctionalRequirement | null> {
    try {
      return await this.service.deleteFunctionalRequirement({
        where: params,
        select: {
          createdAt: true,
          description: true,
          id: true,

          project: {
            select: {
              id: true,
            },
          },

          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
